diff --git a/README.md b/README.md
index acd5c93..42118b7 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,5 @@
+The main page of it has moved to [https://github.com/NewMotion/docile-charge-point/](https://github.com/NewMotion/docile-charge-point/).
+
 # docile-charge-point
 
 A scriptable [OCPP](http://openchargealliance.org/protocols/ocpp/ocpp-16/) charge point simulator.
@@ -36,6 +38,7 @@ so e.g.:
 
 ```
 sbt 'run -c chargepoint0123 -v 1.6 ws://example.org/ocpp-j-endpoint examples/heartbeat.scala'
+sbt 'run -c chargepoint4567 -v 1.6 -i -a abcdef1234abcdef1234abcdef1234abcdef1234 -k /path/to/keystore.jks -p mypass wss://example.org/ocpp-j-endpoint'
 ```
 
 See `sbt 'run --help'` for more options.
@@ -388,5 +391,3 @@ It's far from finished now. The next steps I plan to develop:
  * Web interface: click together test: 150 CPs behaving like this, 300 like that, ..., GO!
 
  * Live demo on the web?
-
-
diff --git a/src/main/scala/chargepoint/docile/Main.scala b/src/main/scala/chargepoint/docile/Main.scala
index 4646253..07d505b 100644
--- a/src/main/scala/chargepoint/docile/Main.scala
+++ b/src/main/scala/chargepoint/docile/Main.scala
@@ -33,6 +33,17 @@ object Main extends App with StrictLogging {
       descr = "Authorization key to use for Basic Auth (hex-encoded, 40 characters)"
     )
 
+    val keystoreFile = opt[String](
+      default = None,
+      descr = "Keystore file for ssl (e.g: ./keystore.jks)"
+    )
+
+    val keystorePassword = opt[String](
+      default = None,
+      short = 'p',
+      descr = "Keystore password to unlock the keystore file"
+    )
+
     val chargePointId = opt[String](
       default = Some("03000001"),
       descr = "ChargePointIdentity to identify ourselves to the Central System"
@@ -143,6 +154,8 @@ object Main extends App with StrictLogging {
     uri = conf.uri(),
     ocppVersion = conf.version(),
     authKey = conf.authKey.toOption,
+    keystoreFile = conf.keystoreFile.toOption,
+    keystorePassword = conf.keystorePassword.toOption,
     repeat = repeatMode
   )
 
diff --git a/src/main/scala/chargepoint/docile/dsl/OcppTest.scala b/src/main/scala/chargepoint/docile/dsl/OcppTest.scala
index 0ae13ae..ff3bc38 100644
--- a/src/main/scala/chargepoint/docile/dsl/OcppTest.scala
+++ b/src/main/scala/chargepoint/docile/dsl/OcppTest.scala
@@ -9,6 +9,7 @@ import com.thenewmotion.ocpp.Version
 import com.thenewmotion.ocpp.json.api._
 import com.thenewmotion.ocpp.messages.{ChargePointReq, ChargePointRes}
 import com.typesafe.scalalogging.Logger
+import javax.net.ssl.SSLContext
 import org.slf4j.LoggerFactory
 
 
@@ -29,9 +30,15 @@ trait OcppTest extends MessageLogging {
     chargerId: String,
     endpoint: URI,
     version: Version,
-    authKey: Option[String]
+    authKey: Option[String],
+    keystoreFile: Option[String],
+    keystorePassword: Option[String]
   ): Unit = {
-    connect(receivedMsgManager, chargerId, endpoint, version, authKey)
+    connect(receivedMsgManager, chargerId, endpoint, version, authKey)(
+      keystoreFile.fold(SSLContext.getDefault) { file =>
+        SslContext(file, keystorePassword.getOrElse(""))
+      }
+    )
     run()
     disconnect()
   }
@@ -42,7 +49,7 @@ trait OcppTest extends MessageLogging {
     endpoint: URI,
     version: Version,
     authKey: Option[String]
-  ): Unit = {
+  )(implicit sslContext: SSLContext): Unit = {
 
     implicit val ec: ExecutionContext = scala.concurrent.ExecutionContext.global
 
diff --git a/src/main/scala/chargepoint/docile/dsl/SslContext.scala b/src/main/scala/chargepoint/docile/dsl/SslContext.scala
new file mode 100644
index 0000000..badd062
--- /dev/null
+++ b/src/main/scala/chargepoint/docile/dsl/SslContext.scala
@@ -0,0 +1,45 @@
+package chargepoint.docile.dsl
+
+import java.io.FileInputStream
+import java.security.KeyStore
+
+import javax.net.ssl.KeyManagerFactory
+import javax.net.ssl.SSLContext
+import javax.net.ssl.TrustManagerFactory
+
+object SslContext {
+  def apply(
+    keystoreFile: String,
+    keystorePassword: String
+  ): SSLContext = {
+    val password = keystorePassword.toCharArray
+    val clientCertKeyStore = {
+      val keyStore = KeyStore.getInstance(KeyStore.getDefaultType)
+      val fileInputStream = new FileInputStream(keystoreFile)
+      try {
+        keyStore.load(fileInputStream, password)
+      } finally {
+        fileInputStream.close()
+      }
+      keyStore
+    }
+
+    val keyManagers = {
+      val keyManagerFactory = KeyManagerFactory.getInstance("SunX509")
+      keyManagerFactory.init(clientCertKeyStore, password)
+      keyManagerFactory.getKeyManagers
+    }
+
+    val trustManagers = {
+      val trustManagerFactory = TrustManagerFactory.getInstance(
+        TrustManagerFactory.getDefaultAlgorithm
+      )
+      trustManagerFactory.init(clientCertKeyStore)
+      trustManagerFactory.getTrustManagers
+    }
+
+    val context = SSLContext.getInstance("TLS")
+    context.init(keyManagers, trustManagers, null)
+    context
+  }
+}
diff --git a/src/main/scala/chargepoint/docile/test/InteractiveOcppTest.scala b/src/main/scala/chargepoint/docile/test/InteractiveOcppTest.scala
index 34e47a3..79cd467 100644
--- a/src/main/scala/chargepoint/docile/test/InteractiveOcppTest.scala
+++ b/src/main/scala/chargepoint/docile/test/InteractiveOcppTest.scala
@@ -49,10 +49,10 @@ object InteractiveOcppTest {
 
     protected def connectionData: OcppConnectionData
 
-    def q: Unit =
+    def q(): Unit =
       connectionData.receivedMsgManager.currentQueueContents foreach println
 
-    def whoami: Unit =
+    def whoami(): Unit =
       println(connectionData.chargePointIdentity)
   }
 }
diff --git a/src/main/scala/chargepoint/docile/test/Runner.scala b/src/main/scala/chargepoint/docile/test/Runner.scala
index b9122a8..682958d 100644
--- a/src/main/scala/chargepoint/docile/test/Runner.scala
+++ b/src/main/scala/chargepoint/docile/test/Runner.scala
@@ -7,7 +7,7 @@ import java.net.URI
 import scala.tools.reflect.ToolBox
 import scala.util.{Failure, Success, Try}
 import scala.collection.mutable
-import scala.concurrent.{Await, Future, Promise, duration}
+import scala.concurrent.{duration, Await, Future, Promise}
 import duration.Duration
 import scala.concurrent.ExecutionContext.Implicits.global
 import chargepoint.docile.dsl._
@@ -21,6 +21,8 @@ case class RunnerConfig(
   uri: URI,
   ocppVersion: ocpp.Version,
   authKey: Option[String],
+  keystoreFile: Option[String],
+  keystorePassword: Option[String],
   repeat: RepeatMode
 )
 
@@ -72,6 +74,7 @@ class Runner(testCases: Seq[TestCase]) {
         override def run(): Unit = {
           val resultsForChargePoint = runnerConfig.chargePointId -> Runner.this.runOneCase(runnerConfig)
           results(i - 1).success(resultsForChargePoint)
+          ()
         }
       }
     }
@@ -127,7 +130,9 @@ class Runner(testCases: Seq[TestCase]) {
       runnerCfg.chargePointId,
       runnerCfg.uri,
       runnerCfg.ocppVersion,
-      runnerCfg.authKey
+      runnerCfg.authKey,
+      runnerCfg.keystoreFile,
+      runnerCfg.keystorePassword
     )) match {
       case Success(_)                => TestPassed
       case Failure(e: ScriptFailure) => TestFailed(e)
